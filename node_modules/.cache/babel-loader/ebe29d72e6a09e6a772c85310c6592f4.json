{"ast":null,"code":"import _defineProperty from\"/home/joaquim/internship/kanban/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/home/joaquim/internship/kanban/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/joaquim/internship/kanban/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"/home/joaquim/internship/kanban/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";function _templateObject(){var data=_taggedTemplateLiteral([\"\\n    display: flex;\\n    flex-wrap: wrap;\\n\"]);_templateObject=function _templateObject(){return data;};return data;}import React,{useState}from'react';import'./App.css';import initialData from\"./initial-data\";import Column from'./components/Column.jsx';import{DragDropContext}from'react-beautiful-dnd';import styled from'styled-components';import Navbar from\"./components/Navbar\";var Container=styled.div(_templateObject());function App(){var _useState=useState(initialData),_useState2=_slicedToArray(_useState,2),state=_useState2[0],setState=_useState2[1];// const onDragStart = (result) => {\n//   document.body.style.color = 'orange';\n// }\n//\n// const onDragUpdate = (result) => {\n//     document.body.style.color = 'red';\n// }\nvar onDragEnd=function onDragEnd(result){var _objectSpread2;// document.body.style.color = 'inherit';\nconsole.log(result);var destination=result.destination,source=result.source,draggableId=result.draggableId;if(!destination){return;}if(destination.droppableId===source.droppableId&&destination.index===source.index){return;}var srcColumn=state.columns[source.droppableId];var srcTaskList=Array.from(srcColumn.taskIds);var destColumn=state.columns[destination.droppableId];var destTaskList=Array.from(destColumn.taskIds);srcTaskList.splice(source.index,1);if(source.droppableId===destination.droppableId)srcTaskList.splice(destination.index,0,draggableId);destTaskList.splice(destination.index,0,draggableId);var newSourceColumn=_objectSpread(_objectSpread({},srcColumn),{},{taskIds:srcTaskList});var newDestColumn=_objectSpread(_objectSpread({},destColumn),{},{taskIds:destTaskList});var newState=_objectSpread(_objectSpread({},state),{},{columns:_objectSpread(_objectSpread({},state.columns),{},(_objectSpread2={},_defineProperty(_objectSpread2,source.droppableId,newSourceColumn),_defineProperty(_objectSpread2,destination.droppableId,newDestColumn),_objectSpread2))});setState(newState);console.log('STATE',newState);};return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Navbar,null),/*#__PURE__*/React.createElement(DragDropContext,{onDragEnd:onDragEnd// onDragStart={onDragStart}\n// onDragUpdate={onDragUpdate}\n},/*#__PURE__*/React.createElement(Container,null,state.columnOrder.map(function(columnId){var column=state.columns[columnId];var tasks=column.taskIds.map(function(taskId){return state.tasks[taskId];});return/*#__PURE__*/React.createElement(Column,{key:column.id,column:column,tasks:tasks});}))));}export default App;","map":{"version":3,"sources":["/home/joaquim/internship/kanban/src/App.js"],"names":["React","useState","initialData","Column","DragDropContext","styled","Navbar","Container","div","App","state","setState","onDragEnd","result","console","log","destination","source","draggableId","droppableId","index","srcColumn","columns","srcTaskList","Array","from","taskIds","destColumn","destTaskList","splice","newSourceColumn","newDestColumn","newState","columnOrder","map","columnId","column","tasks","taskId","id"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport initialData from \"./initial-data\";\nimport Column from './components/Column.jsx'\nimport { DragDropContext } from 'react-beautiful-dnd'\nimport styled from 'styled-components'\nimport Navbar from \"./components/Navbar\";\n\n\nconst Container = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n`\n\nfunction App() {\n  const [state, setState] = useState(initialData);\n\n  // const onDragStart = (result) => {\n  //   document.body.style.color = 'orange';\n  // }\n  //\n  // const onDragUpdate = (result) => {\n  //     document.body.style.color = 'red';\n  // }\n\n  const onDragEnd = (result) => {\n      // document.body.style.color = 'inherit';\n      console.log(result)\n      const { destination, source, draggableId } = result;\n\n      if (!destination) {\n          return;\n      }\n\n      if (\n          destination.droppableId === source.droppableId &&\n          destination.index === source.index\n      ) {\n          return;\n      }\n\n      const srcColumn = state.columns[source.droppableId];\n      const srcTaskList = Array.from(srcColumn.taskIds);\n\n      const destColumn = state.columns[destination.droppableId];\n      const destTaskList = Array.from(destColumn.taskIds);\n\n      srcTaskList.splice(source.index, 1);\n\n      if (source.droppableId === destination.droppableId)\n        srcTaskList.splice(destination.index, 0, draggableId);\n\n      destTaskList.splice(destination.index, 0, draggableId);\n\n      const newSourceColumn = {\n          ...srcColumn,\n          taskIds: srcTaskList,\n      }\n\n      const newDestColumn = {\n          ...destColumn,\n          taskIds: destTaskList,\n      }\n\n      const newState = {\n          ...state,\n          columns: {\n              ...state.columns,\n              [source.droppableId]: newSourceColumn,\n              [destination.droppableId]: newDestColumn,\n          }\n      }\n\n      setState(newState)\n      console.log('STATE', newState);\n  }\n\n  return (\n      <>\n          <Navbar />\n          <DragDropContext\n            onDragEnd={onDragEnd}\n            // onDragStart={onDragStart}\n            // onDragUpdate={onDragUpdate}\n          >\n              <Container>\n                  {state.columnOrder.map( columnId => {\n                    const column = state.columns[columnId];\n                    const tasks = column.taskIds.map( taskId => state.tasks[taskId]);\n\n                    return <Column key={column.id} column={column} tasks={tasks} />\n                  })}\n              </Container>\n          </DragDropContext>\n      </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}