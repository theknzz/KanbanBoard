{"ast":null,"code":"import initialData from \"../../initial-data\";\n\nconst rootReducer = (state = initialData, action) => {\n  switch (action.type) {\n    case 'CREATE_TASK':\n      const newTasks = { ...state.tasks,\n        [action.id]: {\n          id: action.id,\n          content: action.taskInfo.task\n        }\n      };\n      console.log(newTasks);\n      const taskList = state.columns[action.taskInfo.columnId].taskIds;\n      const newColumns = { ...state.columns,\n        [action.taskInfo.columnId]: {\n          id: action.taskInfo.columnId,\n          title: action.taskInfo.title,\n          taskIds: [...taskList, action.id]\n        }\n      };\n      return { ...state,\n        tasks: newTasks,\n        columns: newColumns\n      };\n\n    case 'UPDATE_BOARD':\n      return {\n        tasks: action.board.tasks,\n        columns: action.board.columns,\n        columnOrder: action.board.columnOrder\n      };\n\n    case 'DELETE_TASK':\n      // filter all the tasks and delete the respective one\n      const tasks = state.tasks;\n      delete tasks[action.taskId];\n      console.log(tasks); // pick the task's column\n\n      let col = state.columns[action.columnId]; // get the tasks from that column\n\n      let tasksFromCol = Array.from(col.taskIds); // filter those tasks and delete the respective one\n\n      tasksFromCol = tasksFromCol.filter(task => {\n        return task !== action.taskId;\n      }); // update the state\n\n      return { ...state,\n        tasks,\n        columns: { ...state.columns,\n          [col.id]: { ...col,\n            taskIds: tasksFromCol\n          }\n        }\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/home/joaquim/internship/kanban/src/store/reducers/rootReducer.js"],"names":["initialData","rootReducer","state","action","type","newTasks","tasks","id","content","taskInfo","task","console","log","taskList","columns","columnId","taskIds","newColumns","title","board","columnOrder","taskId","col","tasksFromCol","Array","from","filter"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,oBAAxB;;AAEA,MAAMC,WAAW,GAAG,CAAEC,KAAK,GAAGF,WAAV,EAAuBG,MAAvB,KAAkC;AAClD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,aAAL;AACI,YAAMC,QAAQ,GAAG,EACb,GAAGH,KAAK,CAACI,KADI;AAEb,SAACH,MAAM,CAACI,EAAR,GAAa;AACTA,UAAAA,EAAE,EAAEJ,MAAM,CAACI,EADF;AAETC,UAAAA,OAAO,EAAEL,MAAM,CAACM,QAAP,CAAgBC;AAFhB;AAFA,OAAjB;AAQAC,MAAAA,OAAO,CAACC,GAAR,CAAYP,QAAZ;AAEA,YAAMQ,QAAQ,GAAGX,KAAK,CAACY,OAAN,CAAcX,MAAM,CAACM,QAAP,CAAgBM,QAA9B,EAAwCC,OAAzD;AAEA,YAAMC,UAAU,GAAG,EACf,GAAGf,KAAK,CAACY,OADM;AAEf,SAACX,MAAM,CAACM,QAAP,CAAgBM,QAAjB,GAA4B;AACxBR,UAAAA,EAAE,EAAEJ,MAAM,CAACM,QAAP,CAAgBM,QADI;AAExBG,UAAAA,KAAK,EAAEf,MAAM,CAACM,QAAP,CAAgBS,KAFC;AAGxBF,UAAAA,OAAO,EAAE,CAAC,GAAGH,QAAJ,EAAcV,MAAM,CAACI,EAArB;AAHe;AAFb,OAAnB;AASA,aAAO,EACH,GAAGL,KADA;AAEHI,QAAAA,KAAK,EAAED,QAFJ;AAGHS,QAAAA,OAAO,EAAEG;AAHN,OAAP;;AAKJ,SAAK,cAAL;AACI,aAAO;AACHX,QAAAA,KAAK,EAAEH,MAAM,CAACgB,KAAP,CAAab,KADjB;AAEHQ,QAAAA,OAAO,EAAEX,MAAM,CAACgB,KAAP,CAAaL,OAFnB;AAGHM,QAAAA,WAAW,EAAEjB,MAAM,CAACgB,KAAP,CAAaC;AAHvB,OAAP;;AAKJ,SAAK,aAAL;AACI;AACA,YAAMd,KAAK,GAAGJ,KAAK,CAACI,KAApB;AAEA,aAAOA,KAAK,CAACH,MAAM,CAACkB,MAAR,CAAZ;AACAV,MAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ,EALJ,CAMI;;AACA,UAAIgB,GAAG,GAAGpB,KAAK,CAACY,OAAN,CAAcX,MAAM,CAACY,QAArB,CAAV,CAPJ,CASI;;AACA,UAAIQ,YAAY,GAAGC,KAAK,CAACC,IAAN,CAAWH,GAAG,CAACN,OAAf,CAAnB,CAVJ,CAYI;;AACAO,MAAAA,YAAY,GAAGA,YAAY,CAACG,MAAb,CAAoBhB,IAAI,IAAI;AACvC,eAAOA,IAAI,KAAKP,MAAM,CAACkB,MAAvB;AACH,OAFc,CAAf,CAbJ,CAiBI;;AACA,aAAO,EACH,GAAGnB,KADA;AAEHI,QAAAA,KAFG;AAGHQ,QAAAA,OAAO,EAAE,EACL,GAAGZ,KAAK,CAACY,OADJ;AAEL,WAACQ,GAAG,CAACf,EAAL,GAAU,EACN,GAAGe,GADG;AAENN,YAAAA,OAAO,EAAEO;AAFH;AAFL;AAHN,OAAP;;AAWJ;AACI,aAAOrB,KAAP;AAhER;AAkEH,CAnED;;AAqEA,eAAeD,WAAf","sourcesContent":["import initialData from \"../../initial-data\";\n\nconst rootReducer = ( state = initialData, action) => {\n    switch(action.type) {\n        case 'CREATE_TASK':\n            const newTasks = {\n                ...state.tasks,\n                [action.id]: {\n                    id: action.id,\n                    content: action.taskInfo.task,\n                }\n            };\n\n            console.log(newTasks)\n\n            const taskList = state.columns[action.taskInfo.columnId].taskIds;\n\n            const newColumns = {\n                ...state.columns,\n                [action.taskInfo.columnId]: {\n                    id: action.taskInfo.columnId,\n                    title: action.taskInfo.title,\n                    taskIds: [...taskList, action.id]\n                }\n            }\n\n            return {\n                ...state,\n                tasks: newTasks,\n                columns: newColumns,\n            }\n        case 'UPDATE_BOARD':\n            return {\n                tasks: action.board.tasks,\n                columns: action.board.columns,\n                columnOrder: action.board.columnOrder,\n            }\n        case 'DELETE_TASK':\n            // filter all the tasks and delete the respective one\n            const tasks = state.tasks;\n\n            delete tasks[action.taskId];\n            console.log(tasks)\n            // pick the task's column\n            let col = state.columns[action.columnId];\n\n            // get the tasks from that column\n            let tasksFromCol = Array.from(col.taskIds);\n\n            // filter those tasks and delete the respective one\n            tasksFromCol = tasksFromCol.filter(task => {\n                return task !== action.taskId\n            });\n\n            // update the state\n            return {\n                ...state,\n                tasks,\n                columns: {\n                    ...state.columns,\n                    [col.id]: {\n                        ...col,\n                        taskIds: tasksFromCol,\n                    }\n                }\n            };\n        default:\n            return state;\n    }\n}\n\nexport default rootReducer"]},"metadata":{},"sourceType":"module"}