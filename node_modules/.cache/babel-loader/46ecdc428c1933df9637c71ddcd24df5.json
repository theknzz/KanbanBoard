{"ast":null,"code":"var _jsxFileName = \"/home/joaquim/internship/kanban/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport Column from './components/Column.jsx';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport styled from 'styled-components';\nimport Navbar from \"./components/Navbar\";\nimport { connect } from 'react-redux';\nconst Container = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n`;\n\nfunction App(props) {\n  // const onDragStart = (result) => {\n  //   document.body.style.color = 'orange';\n  // }\n  //\n  // const onDragUpdate = (result) => {\n  //     document.body.style.color = 'red';\n  // }\n  // const onDragEnd = (result) => {\n  //     // document.body.style.color = 'inherit';\n  //     const { destination, source, draggableId } = result;\n  //\n  //     if (!destination) {\n  //         return;\n  //     }\n  //\n  //     if (\n  //         destination.droppableId === source.droppableId &&\n  //         destination.index === source.index\n  //     ) {\n  //         return;\n  //     }\n  //\n  //     const srcColumn = props.cols[source.droppableId];\n  //     const srcTaskList = Array.from(srcColumn.taskIds);\n  //\n  //     const destColumn = props.cols[destination.droppableId];\n  //     const destTaskList = Array.from(destColumn.taskIds);\n  //\n  //     srcTaskList.splice(source.index, 1);\n  //\n  //     if (source.droppableId === destination.droppableId)\n  //       srcTaskList.splice(destination.index, 0, draggableId);\n  //\n  //     destTaskList.splice(destination.index, 0, draggableId);\n  //\n  //     const newSourceColumn = {\n  //         ...srcColumn,\n  //         taskIds: srcTaskList,\n  //     }\n  //\n  //     const newDestColumn = {\n  //         ...destColumn,\n  //         taskIds: destTaskList,\n  //     }\n  //\n  //     const newState = {\n  //         ...state,\n  //         columns: {\n  //             ...state.columns,\n  //             [source.droppableId]: newSourceColumn,\n  //             [destination.droppableId]: newDestColumn,\n  //         }\n  //     }\n  //\n  //     setState(newState)\n  //     console.log('STATE', newState);\n  //\n  console.log(props);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd // onDragStart={onDragStart}\n    // onDragUpdate={onDragUpdate}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 15\n    }\n  }, props.columnOrder.map(columnId => {\n    const column = props.cols[columnId];\n    console.log('col:', column.taskIds);\n    const tasks = column.taskIds && column.taskIds.map(taskId => props.tasks[taskId]);\n    return /*#__PURE__*/React.createElement(Column, {\n      key: column.id,\n      column: column,\n      tasks: tasks,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 28\n      }\n    });\n  }))));\n}\n\nconst mapStateToProps = state => {\n  return {\n    tasks: state.tasks,\n    cols: state.columns,\n    columnOrder: state.columnOrder\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/home/joaquim/internship/kanban/src/App.js"],"names":["React","Column","DragDropContext","styled","Navbar","connect","Container","div","App","props","console","log","onDragEnd","columnOrder","map","columnId","column","cols","taskIds","tasks","taskId","id","mapStateToProps","state","columns","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,MAAMC,SAAS,GAAGH,MAAM,CAACI,GAAI;AAC7B;AACA;AACA,CAHA;;AAKA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACF,sBACI,uDACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI,oBAAC,eAAD;AACE,IAAA,SAAS,EAAEG,SADb,CAEE;AACA;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKH,KAAK,CAACI,WAAN,CAAkBC,GAAlB,CAAuBC,QAAQ,IAAI;AAClC,UAAMC,MAAM,GAAGP,KAAK,CAACQ,IAAN,CAAWF,QAAX,CAAf;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBK,MAAM,CAACE,OAA3B;AACA,UAAMC,KAAK,GAAGH,MAAM,CAACE,OAAP,IAAkBF,MAAM,CAACE,OAAP,CAAeJ,GAAf,CAAoBM,MAAM,IAAIX,KAAK,CAACU,KAAN,CAAYC,MAAZ,CAA9B,CAAhC;AAEA,wBAAO,oBAAC,MAAD;AAAQ,MAAA,GAAG,EAAEJ,MAAM,CAACK,EAApB;AAAwB,MAAA,MAAM,EAAEL,MAAhC;AAAwC,MAAA,KAAK,EAAEG,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GANA,CADL,CALJ,CAFJ,CADJ;AAoBD;;AAED,MAAMG,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHJ,IAAAA,KAAK,EAAEI,KAAK,CAACJ,KADV;AAEHF,IAAAA,IAAI,EAAEM,KAAK,CAACC,OAFT;AAGHX,IAAAA,WAAW,EAAEU,KAAK,CAACV;AAHhB,GAAP;AAKH,CAND;;AAQA,MAAMY,kBAAkB,GAAIC,QAAD,IAAc;AACrC,SAAO,EAAP;AAGH,CAJD;;AAMA,eAAgBrB,OAAO,CAACiB,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CjB,GAA7C,CAAhB","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Column from './components/Column.jsx'\nimport { DragDropContext } from 'react-beautiful-dnd'\nimport styled from 'styled-components'\nimport Navbar from \"./components/Navbar\";\nimport { connect } from 'react-redux'\n\nconst Container = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n`\n\nfunction App(props) {\n\n  // const onDragStart = (result) => {\n  //   document.body.style.color = 'orange';\n  // }\n  //\n  // const onDragUpdate = (result) => {\n  //     document.body.style.color = 'red';\n  // }\n\n  // const onDragEnd = (result) => {\n  //     // document.body.style.color = 'inherit';\n  //     const { destination, source, draggableId } = result;\n  //\n  //     if (!destination) {\n  //         return;\n  //     }\n  //\n  //     if (\n  //         destination.droppableId === source.droppableId &&\n  //         destination.index === source.index\n  //     ) {\n  //         return;\n  //     }\n  //\n  //     const srcColumn = props.cols[source.droppableId];\n  //     const srcTaskList = Array.from(srcColumn.taskIds);\n  //\n  //     const destColumn = props.cols[destination.droppableId];\n  //     const destTaskList = Array.from(destColumn.taskIds);\n  //\n  //     srcTaskList.splice(source.index, 1);\n  //\n  //     if (source.droppableId === destination.droppableId)\n  //       srcTaskList.splice(destination.index, 0, draggableId);\n  //\n  //     destTaskList.splice(destination.index, 0, draggableId);\n  //\n  //     const newSourceColumn = {\n  //         ...srcColumn,\n  //         taskIds: srcTaskList,\n  //     }\n  //\n  //     const newDestColumn = {\n  //         ...destColumn,\n  //         taskIds: destTaskList,\n  //     }\n  //\n  //     const newState = {\n  //         ...state,\n  //         columns: {\n  //             ...state.columns,\n  //             [source.droppableId]: newSourceColumn,\n  //             [destination.droppableId]: newDestColumn,\n  //         }\n  //     }\n  //\n  //     setState(newState)\n  //     console.log('STATE', newState);\n  //\n    console.log(props)\n  return (\n      <>\n          <Navbar />\n          <DragDropContext\n            onDragEnd={onDragEnd}\n            // onDragStart={onDragStart}\n            // onDragUpdate={onDragUpdate}\n          >\n              <Container>\n                  {props.columnOrder.map( columnId => {\n                    const column = props.cols[columnId];\n                    console.log('col:', column.taskIds)\n                    const tasks = column.taskIds && column.taskIds.map( taskId => props.tasks[taskId]);\n\n                    return <Column key={column.id} column={column} tasks={tasks} />\n                  })}\n              </Container>\n          </DragDropContext>\n      </>\n  );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        tasks: state.tasks,\n        cols: state.columns,\n        columnOrder: state.columnOrder,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n\n    }\n}\n\nexport default  connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}