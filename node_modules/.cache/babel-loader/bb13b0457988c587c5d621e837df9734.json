{"ast":null,"code":"var _jsxFileName = \"/home/joaquim/internship/kanban/src/App.js\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport initialData from \"./initial-data\";\nimport Column from './components/Column.jsx';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport styled from 'styled-components';\nimport Navbar from \"./components/Navbar\";\nimport { connect } from 'react-redux';\nconst Container = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n`;\n\nfunction App(props) {\n  const [state, setState] = useState(initialData);\n  setState({\n    tasks: props.tasks,\n    columns: props.cols,\n    columnOrder: props.columnOrder\n  }); // const onDragStart = (result) => {\n  //   document.body.style.color = 'orange';\n  // }\n  //\n  // const onDragUpdate = (result) => {\n  //     document.body.style.color = 'red';\n  // }\n\n  const onDragEnd = result => {\n    // document.body.style.color = 'inherit';\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    const srcColumn = props.cols[source.droppableId];\n    const srcTaskList = Array.from(srcColumn.taskIds);\n    const destColumn = props.cols[destination.droppableId];\n    const destTaskList = Array.from(destColumn.taskIds);\n    srcTaskList.splice(source.index, 1);\n    if (source.droppableId === destination.droppableId) srcTaskList.splice(destination.index, 0, draggableId);\n    destTaskList.splice(destination.index, 0, draggableId);\n    const newSourceColumn = { ...srcColumn,\n      taskIds: srcTaskList\n    };\n    const newDestColumn = { ...destColumn,\n      taskIds: destTaskList\n    };\n    const newState = { ...state,\n      columns: { ...state.columns,\n        [source.droppableId]: newSourceColumn,\n        [destination.droppableId]: newDestColumn\n      }\n    };\n    setState(newState);\n    console.log('STATE', newState);\n  };\n\n  console.log(props);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd // onDragStart={onDragStart}\n    // onDragUpdate={onDragUpdate}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 15\n    }\n  }, props.columnOrder.map(columnId => {\n    const column = props.cols[columnId];\n    console.log('col:', column);\n    const tasks = column.taskIds.map(taskId => state.tasks[taskId]);\n    console.log('TASKS', tasks);\n    return /*#__PURE__*/React.createElement(Column, {\n      key: column.id,\n      column: column,\n      tasks: tasks,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 28\n      }\n    });\n  }))));\n}\n\nconst mapStateToProps = state => {\n  return {\n    tasks: state.tasks,\n    cols: state.columns,\n    columnOrder: state.columnOrder\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/home/joaquim/internship/kanban/src/App.js"],"names":["React","useState","initialData","Column","DragDropContext","styled","Navbar","connect","Container","div","App","props","state","setState","tasks","columns","cols","columnOrder","onDragEnd","result","destination","source","draggableId","droppableId","index","srcColumn","srcTaskList","Array","from","taskIds","destColumn","destTaskList","splice","newSourceColumn","newDestColumn","newState","console","log","map","columnId","column","taskId","id","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport initialData from \"./initial-data\";\nimport Column from './components/Column.jsx'\nimport { DragDropContext } from 'react-beautiful-dnd'\nimport styled from 'styled-components'\nimport Navbar from \"./components/Navbar\";\nimport { connect } from 'react-redux'\n\nconst Container = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n`\n\nfunction App(props) {\n  const [state, setState] = useState(initialData);\n\n  setState({\n      tasks: props.tasks,\n      columns: props.cols,\n      columnOrder: props.columnOrder\n  });\n  // const onDragStart = (result) => {\n  //   document.body.style.color = 'orange';\n  // }\n  //\n  // const onDragUpdate = (result) => {\n  //     document.body.style.color = 'red';\n  // }\n\n  const onDragEnd = (result) => {\n      // document.body.style.color = 'inherit';\n      const { destination, source, draggableId } = result;\n\n      if (!destination) {\n          return;\n      }\n\n      if (\n          destination.droppableId === source.droppableId &&\n          destination.index === source.index\n      ) {\n          return;\n      }\n\n      const srcColumn = props.cols[source.droppableId];\n      const srcTaskList = Array.from(srcColumn.taskIds);\n\n      const destColumn = props.cols[destination.droppableId];\n      const destTaskList = Array.from(destColumn.taskIds);\n\n      srcTaskList.splice(source.index, 1);\n\n      if (source.droppableId === destination.droppableId)\n        srcTaskList.splice(destination.index, 0, draggableId);\n\n      destTaskList.splice(destination.index, 0, draggableId);\n\n      const newSourceColumn = {\n          ...srcColumn,\n          taskIds: srcTaskList,\n      }\n\n      const newDestColumn = {\n          ...destColumn,\n          taskIds: destTaskList,\n      }\n\n      const newState = {\n          ...state,\n          columns: {\n              ...state.columns,\n              [source.droppableId]: newSourceColumn,\n              [destination.droppableId]: newDestColumn,\n          }\n      }\n\n      setState(newState)\n      console.log('STATE', newState);\n  }\n    console.log(props)\n  return (\n      <>\n          <Navbar />\n          <DragDropContext\n            onDragEnd={onDragEnd}\n            // onDragStart={onDragStart}\n            // onDragUpdate={onDragUpdate}\n          >\n              <Container>\n                  {props.columnOrder.map( columnId => {\n                    const column = props.cols[columnId];\n                    console.log('col:', column)\n                    const tasks = column.taskIds.map(taskId => state.tasks[taskId]);\n                    console.log('TASKS', tasks)\n                    return <Column key={column.id} column={column} tasks={tasks} />\n                  })}\n              </Container>\n          </DragDropContext>\n      </>\n  );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        tasks: state.tasks,\n        cols: state.columns,\n        columnOrder: state.columnOrder,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n\n    }\n}\n\nexport default  connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}