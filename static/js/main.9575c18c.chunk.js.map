{"version":3,"sources":["initial-data.js","components/Task.jsx","components/Column.jsx","components/Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["initialData","tasks","id","content","columns","title","taskIds","columnOrder","Container","styled","div","props","isDragging","Task","draggableId","task","index","provided","snapshot","draggableProps","dragHandleProps","ref","innerRef","Title","h3","TaskList","isDraggingOver","Column","column","droppableId","droppableProps","map","key","placeholder","Logo","h1","Navbar","App","useState","state","setState","onDragEnd","result","console","log","destination","source","srcColumn","srcTaskList","Array","from","destColumn","destTaskList","splice","newSourceColumn","newDestColumn","newState","columnId","taskId","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9575c18c.chunk.js","sourcesContent":["const initialData = {\n    tasks: {\n        'task-1': { id: 'task-1', content: 'Take out the garbage' },\n        'task-2': { id: 'task-2', content: 'Watch my favourite show'},\n        'task-3': { id: 'task-3', content: 'Charge my phone'},\n        'task-4': { id: 'task-4', content: 'Cook diner'},\n        'task-5': { id: 'task-5', content: 'Go to sleep'},\n        'task-6': { id: 'task-6', content: 'Read a book'},\n        'task-7': { id: 'task-7', content: 'Write a book'},\n    },\n    columns: {\n        'column-1': {\n            id: 'column-1',\n            title: 'To do',\n            taskIds: ['task-1', 'task-2', 'task-3', 'task-4'],\n        },\n        'column-2': {\n            id: 'column-2',\n            title: 'Progress',\n            taskIds: ['task-5', 'task-6'],\n        },\n        'column-3': {\n            id: 'column-3',\n            title: 'Done',\n            taskIds: ['task-7'],\n        },\n    },\n    columnOrder: ['column-1', 'column-2', 'column-3'],\n}\n\nexport default initialData","import React from 'react'\nimport styled from 'styled-components'\nimport { Draggable } from \"react-beautiful-dnd\";\n\nconst Container = styled.div`\n    border: 1px solid lightgrey;\n    border-radius: 2px;\n    padding: 9px;\n    margin-bottom: 8px;\n    background-color: ${props => props.isDragging ? 'lightgreen': 'white'};\n`;\n\nconst Task = (props) => {\n    return (\n        <Draggable\n            draggableId={props.task.id}\n            index={props.index}\n        >\n            {(provided, snapshot) => (\n                <Container\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                    ref={provided.innerRef}\n                    isDragging={snapshot.isDragging}\n                >\n                    {props.task.content}\n                </Container>\n            )}\n        </Draggable>\n    );\n}\n\nexport default Task","import React from 'react'\nimport styled from 'styled-components'\nimport Task from './Task.jsx'\nimport { Droppable } from 'react-beautiful-dnd'\n\n\nconst Container = styled.div`\n    margin: 8px;\n    border: 1px solid lightgrey;\n    border-radius: 2px;\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    min-height: 100%;\n    background-color: #9CC5A1;\n`;\n\nconst Title = styled.h3`\n    padding: 8px;\n    text-align: center;\n`;\nconst TaskList = styled.div`\n    padding: 8px;\n    transition: background-color 0.2s ease;\n    background-color: ${ props => props.isDraggingOver ? 'skyblue' : 'white'};\n    flex-grow: 1;\n`;\n\nconst Column = (props) => {\n\n    return (\n        <Container>\n            <Title>{ props.column.title}</Title>\n            <Droppable\n                droppableId={props.column.id}\n            >\n                {(provided,snapshot) => (\n                    <TaskList\n                        ref={provided.innerRef}\n                        {...provided.droppableProps}\n                        isDraggingOver={snapshot.isDraggingOver}\n                    >\n                        {props.tasks.map( (task, index) => <Task key={task.id} task={task} index={index}/>)}\n                        {provided.placeholder}\n                    </TaskList>\n                )}\n            </Droppable>\n        </Container>\n    );\n}\n\nexport default Column","import React from 'react'\nimport styled from 'styled-components'\n\n\nconst Container = styled.div`\n    display: flex;\n    background-color: #216869;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    height: 100px;\n    \n`\n\nconst Logo = styled.h1`\n    color: #9CC5A1;\n    text-shadow: 2px 2px #1F2421;\n`\n\nconst Navbar = (props) => {\n    return (\n        <Container>\n            <Logo>Kanban Board</Logo>\n        </Container>\n    );\n}\n\nexport default Navbar\n","import React, { useState } from 'react';\nimport './App.css';\nimport initialData from \"./initial-data\";\nimport Column from './components/Column.jsx'\nimport { DragDropContext } from 'react-beautiful-dnd'\nimport styled from 'styled-components'\nimport Navbar from \"./components/Navbar\";\n\n\nconst Container = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n`\n\nfunction App() {\n  const [state, setState] = useState(initialData);\n\n  // const onDragStart = (result) => {\n  //   document.body.style.color = 'orange';\n  // }\n  //\n  // const onDragUpdate = (result) => {\n  //     document.body.style.color = 'red';\n  // }\n\n  const onDragEnd = (result) => {\n      // document.body.style.color = 'inherit';\n      console.log(result)\n      const { destination, source, draggableId } = result;\n\n      if (!destination) {\n          return;\n      }\n\n      if (\n          destination.droppableId === source.droppableId &&\n          destination.index === source.index\n      ) {\n          return;\n      }\n\n      const srcColumn = state.columns[source.droppableId];\n      const srcTaskList = Array.from(srcColumn.taskIds);\n\n      const destColumn = state.columns[destination.droppableId];\n      const destTaskList = Array.from(destColumn.taskIds);\n\n      srcTaskList.splice(source.index, 1);\n\n      if (source.droppableId === destination.droppableId)\n        srcTaskList.splice(destination.index, 0, draggableId);\n\n      destTaskList.splice(destination.index, 0, draggableId);\n\n      const newSourceColumn = {\n          ...srcColumn,\n          taskIds: srcTaskList,\n      }\n\n      const newDestColumn = {\n          ...destColumn,\n          taskIds: destTaskList,\n      }\n\n      const newState = {\n          ...state,\n          columns: {\n              ...state.columns,\n              [source.droppableId]: newSourceColumn,\n              [destination.droppableId]: newDestColumn,\n          }\n      }\n\n      setState(newState)\n      console.log('STATE', newState);\n  }\n\n  return (\n      <>\n          <Navbar />\n          <DragDropContext\n            onDragEnd={onDragEnd}\n            // onDragStart={onDragStart}\n            // onDragUpdate={onDragUpdate}\n          >\n              <Container>\n                  {state.columnOrder.map( columnId => {\n                    const column = state.columns[columnId];\n                    const tasks = column.taskIds.map( taskId => state.tasks[taskId]);\n\n                    return <Column key={column.id} column={column} tasks={tasks} />\n                  })}\n              </Container>\n          </DragDropContext>\n      </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}