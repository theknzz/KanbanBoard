{"version":3,"sources":["initial-data.js","components/Task.jsx","store/actions/taskActions.js","components/Column.jsx","components/Navbar.jsx","App.js","serviceWorker.js","store/reducers/rootReducer.js","index.js"],"names":["initialData","tasks","id","content","columns","title","taskIds","columnOrder","Container","styled","div","props","isDragging","Task","draggableId","task","index","provided","snapshot","draggableProps","dragHandleProps","ref","innerRef","taskID","Title","h3","TaskList","isDraggingOver","CreateTask","connect","dispatch","submitTask","type","taskInfo","createTask","useState","columnId","column","state","setState","droppableId","droppableProps","map","key","placeholder","onSubmit","e","preventDefault","value","onChange","name","target","newState","Logo","h1","Navbar","cols","updateBoard","board","onDragEnd","result","console","log","destination","source","srcColumn","srcTaskList","Array","from","destColumn","destTaskList","splice","inSameColumn","newSourceColumn","newDestColumn","taskId","Boolean","window","location","hostname","match","rootReducer","action","newTasks","taskList","newColumns","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.97106149.chunk.js","sourcesContent":["const initialData = {\n    tasks: {\n        'task-1':\n                { id: 'task-1', content: 'Take out the garbage' },\n        'task-2':\n            { id: 'task-2', content: 'Watch my favourite show'},\n        'task-3':\n            { id: 'task-3', content: 'Charge my phone'},\n        'task-4':\n            { id: 'task-4', content: 'Cook diner'},\n        'task-5':\n            { id: 'task-5', content: 'Go to sleep'},\n        'task-6':\n            { id: 'task-6', content: 'Read a book'},\n        'task-7':\n            { id: 'task-7', content: 'Write a book'},\n    },\n    columns: {\n        'column-1': {\n            id: 'column-1',\n            title: 'To do',\n            taskIds: ['task-1', 'task-2', 'task-3', 'task-4'],\n        },\n        'column-2': {\n            id: 'column-2',\n            title: 'Progress',\n            taskIds: ['task-5', 'task-6'],\n        },\n        'column-3': {\n            id: 'column-3',\n            title: 'Done',\n            taskIds: ['task-7'],\n        },\n    },\n    columnOrder: ['column-1', 'column-2', 'column-3'],\n}\nexport default initialData","import React from 'react'\nimport styled from 'styled-components'\nimport { Draggable } from \"react-beautiful-dnd\";\n\nconst Container = styled.div`\n    border: 1px solid lightgrey;\n    border-radius: 2px;\n    padding: 9px;\n    margin-bottom: 8px;\n    background-color: ${props => props.isDragging ? 'lightgreen': 'white'};\n`;\n\n\nconst Task = (props) => {\n    return (\n        <>\n            <Draggable\n                draggableId={props.task.id}\n                index={props.index}\n            >\n                {(provided, snapshot) => (\n                    <Container\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        ref={provided.innerRef}\n                        isDragging={snapshot.isDragging}\n                    >\n                        {props.task.content}\n                    </Container>\n                )}\n            </Draggable>\n        </>\n    );\n}\n\nexport default Task","let taskID = 100;\n\nexport const createTask = (task) => {\n   return {\n       type: 'CREATE_TASK',\n       id: `task-${++taskID}`,\n       taskInfo: task\n   }\n}\n\nexport const updateBoard = (board) => {\n    return {\n        type: 'UPDATE_BOARD',\n        board,\n    }\n}","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport Task from './Task.jsx'\nimport { Droppable } from 'react-beautiful-dnd'\nimport { connect } from 'react-redux'\nimport { createTask } from \"../store/actions/taskActions\";\n\nconst Container = styled.div`\n    margin: 8px;\n    border: 1px solid lightgrey;\n    border-radius: 2px;\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    min-height: 100%;\n    background-color: #9CC5A1;\n`;\n\nconst Title = styled.h3`\n    padding: 8px;\n    text-align: center;\n`;\nconst TaskList = styled.div`\n    padding: 8px;\n    transition: background-color 0.2s ease;\n    background-color: ${ props => props.isDraggingOver ? 'skyblue' : 'white'};\n    flex-grow: 1;\n`;\n\nconst CreateTask = styled.div`\n    padding: 8px;\n`\n\n\nconst Column = (props) => {\n\n    const [state, setState] = useState({\n        columnId: props.column.id,\n        task: '',\n        title: props.column.title,\n    });\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        props.submitTask(state);\n        // console.log(state)\n        setState({\n            ...state,\n            task: ''\n        })\n    }\n\n    const handleChange = (e) => {\n        const name = e.target.value;\n        const newState = {\n            ...state,\n            task: name,\n            title: props.column.title,\n        }\n        setState(newState);\n    }\n\n    return (\n        <>\n            <Container>\n                <Title>{ props.column.title }</Title>\n                <Droppable\n                    droppableId={props.column.id}\n                >\n                    {(provided,snapshot) => (\n                        <TaskList\n                            ref={provided.innerRef}\n                            {...provided.droppableProps}\n                            isDraggingOver={snapshot.isDraggingOver}\n                        >\n                            {props.tasks && props.tasks.map( (task, index) =>\n                                <Task key={task.id} task={task} index={index}/>)}\n                            {provided.placeholder}\n                        </TaskList>\n                    )}\n                </Droppable>\n                <CreateTask>\n                    <form onSubmit={handleSubmit}>\n                        <input value={state.task} onChange={handleChange} type={'text'}/>\n                    </form>\n                </CreateTask>\n            </Container>\n        </>\n    );\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        submitTask: (task) => dispatch(createTask(task))\n    }\n}\n\n\nexport default connect(null, mapDispatchToProps)(Column)","import React from 'react'\nimport styled from 'styled-components'\n\n\nconst Container = styled.div`\n    display: flex;\n    background-color: #216869;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    height: 100px;\n    \n`\n\nconst Logo = styled.h1`\n    color: #9CC5A1;\n    text-shadow: 2px 2px #1F2421;\n`\n\nconst Navbar = (props) => {\n    return (\n        <Container>\n            <Logo>Kanban Board</Logo>\n        </Container>\n    );\n}\n\nexport default Navbar\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport initialData from \"./initial-data\";\nimport Column from './components/Column.jsx'\nimport { DragDropContext } from 'react-beautiful-dnd'\nimport styled from 'styled-components'\nimport Navbar from \"./components/Navbar\";\nimport { connect } from 'react-redux'\nimport {updateBoard} from \"./store/actions/taskActions\";\n\nconst Container = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n`\n\nfunction App(props) {\n  // const onDragStart = (result) => {\n  //   document.body.style.color = 'orange';\n  // }\n  //\n  // const onDragUpdate = (result) => {\n  //     document.body.style.color = 'red';\n  // }\n\n  const onDragEnd = (result) => {\n    // document.body.style.color = 'inherit';\n      console.log(result)\n      const { destination, source, draggableId } = result;\n\n      // if user is trying to drop a draggable out of a droppable\n      if (!destination) {\n          return;\n      }\n\n      // if the user try to move the card into the same position nothing changes\n      if (\n          destination.droppableId === source.droppableId &&\n          destination.index === source.index\n      ) {\n          return;\n      }\n\n      // get the column and the tasks from the origin/source column\n      const srcColumn = props.cols[source.droppableId];\n      const srcTaskList = Array.from(srcColumn.taskIds);\n\n      // get the column and the tasks from the destination column\n      const destColumn = props.cols[destination.droppableId];\n      const destTaskList = Array.from(destColumn.taskIds);\n\n      // remove the tasks from the original position\n      srcTaskList.splice(source.index, 1);\n\n      console.log('track', srcTaskList)\n\n      const inSameColumn = source.droppableId === destination.droppableId;\n\n      if (inSameColumn)\n          srcTaskList.splice(destination.index, 0, draggableId);\n\n      // add the tasks at the final position\n      destTaskList.splice(destination.index, 0, draggableId);\n\n      // update the source column\n      const newSourceColumn = {\n          ...srcColumn,\n          taskIds: srcTaskList,\n      }\n\n      // update the destination column\n      const newDestColumn = {\n          ...destColumn,\n          taskIds: inSameColumn ? srcTaskList : destTaskList,\n      }\n\n      // update the board\n      const board = {\n          tasks: props.tasks,\n          columnOrder: props.columnOrder,\n          columns: {\n              ...props.cols,\n              [source.droppableId]: newSourceColumn,\n              [destination.droppableId]: newDestColumn,\n          }\n      }\n\n      // call an action to update the board\n      props.updateBoard(board)\n  }\n\n  return (\n      <>\n          <Navbar />\n          <DragDropContext\n            onDragEnd={onDragEnd}\n            // onDragStart={onDragStart}\n            // onDragUpdate={onDragUpdate}\n          >\n              <Container>\n                  {props.columnOrder && props.columnOrder.map( columnId => {\n                      const column = props.cols[columnId];\n                      const tasks = column.taskIds && column.taskIds.map( taskId => props.tasks[taskId]);\n                      console.log('dbg:', column)\n                      return <Column key={column.id} column={column} tasks={tasks} />\n                  })}\n              </Container>\n          </DragDropContext>\n      </>\n  );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        columnOrder: state.columnOrder,\n        cols: state.columns,\n        tasks: state.tasks,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        updateBoard: (board) => dispatch(updateBoard(board)),\n    }\n}\n\nexport default  connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import initialData from \"../../initial-data\";\n\nconst rootReducer = ( state = initialData, action) => {\n    switch(action.type) {\n        case 'CREATE_TASK':\n            const newTasks = {\n                ...state.tasks,\n                [action.id]: {\n                    id: action.id,\n                    content: action.taskInfo.task,\n                }\n            };\n\n            const taskList = state.columns[action.taskInfo.columnId].taskIds;\n\n            const newColumns = {\n                ...state.columns,\n                [action.taskInfo.columnId]: {\n                    id: action.taskInfo.columnId,\n                    title: action.taskInfo.title,\n                    taskIds: [...taskList, action.id]\n                }\n            }\n\n            return {\n                ...state,\n                tasks: newTasks,\n                columns: newColumns,\n            }\n        case 'UPDATE_BOARD':\n            return {\n                tasks: action.board.tasks,\n                columns: action.board.columns,\n                columnOrder: action.board.columnOrder,\n            }\n        default:\n            return state;\n    }\n}\n\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport rootReducer from './store/reducers/rootReducer'\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}